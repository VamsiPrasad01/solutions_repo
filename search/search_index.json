{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"\ud83d\udccc Problem 1: Investigating the Range as a Function of the Angle of Projection \ud83c\udf1f Motivation Projectile motion, while seemingly simple, provides deep insights into physics principles. This exploration aims to analyze how the range of a projectile depends on its launch angle. The equations governing projectile motion, despite their accessibility, can model a broad range of real-world phenomena, from sports to space exploration. \ud83d\udcda Theoretical Foundation \ud83d\udd39 Deriving Equations of Motion Consider a particle launched with an initial velocity \ud835\udc63 0 v 0 \u200b at an angle \ud835\udf03 \u03b8 with respect to the horizontal. Initial velocity components: Horizontal: \ud835\udc63 0 \ud835\udc65 = \ud835\udc63 0 cos \u2061 ( \ud835\udf03 ) v 0x \u200b =v 0 \u200b cos(\u03b8) Vertical: \ud835\udc63 0 \ud835\udc66 = \ud835\udc63 0 sin \u2061 ( \ud835\udf03 ) v 0y \u200b =v 0 \u200b sin(\u03b8) Using Newton's second law and neglecting air resistance: Horizontal acceleration: \ud835\udc51 2 \ud835\udc65 \ud835\udc51 \ud835\udc61 2 = 0 dt 2 d 2 x \u200b =0 Vertical acceleration: \ud835\udc51 2 \ud835\udc66 \ud835\udc51 \ud835\udc61 2 = \u2212 \ud835\udc54 dt 2 d 2 y \u200b =\u2212g Integrating, we get the velocity components: \ud835\udc63 \ud835\udc65 = \ud835\udc63 0 \ud835\udc65 = \ud835\udc63 0 cos \u2061 ( \ud835\udf03 ) v x \u200b =v 0x \u200b =v 0 \u200b cos(\u03b8) \ud835\udc63 \ud835\udc66 = \ud835\udc63 0 \ud835\udc66 \u2212 \ud835\udc54 \ud835\udc61 = \ud835\udc63 0 sin \u2061 ( \ud835\udf03 ) \u2212 \ud835\udc54 \ud835\udc61 v y \u200b =v 0y \u200b \u2212gt=v 0 \u200b sin(\u03b8)\u2212gt Integrating again, we obtain the position equations: \ud835\udc65 ( \ud835\udc61 ) = \ud835\udc63 0 cos \u2061 ( \ud835\udf03 ) \u22c5 \ud835\udc61 x(t)=v 0 \u200b cos(\u03b8)\u22c5t \ud835\udc66 ( \ud835\udc61 ) = \ud835\udc63 0 sin \u2061 ( \ud835\udf03 ) \u22c5 \ud835\udc61 \u2212 1 2 \ud835\udc54 \ud835\udc61 2 y(t)=v 0 \u200b sin(\u03b8)\u22c5t\u2212 2 1 \u200b gt 2 \ud83c\udfaf Analyzing the Range \ud83d\udd38 Range Formula The range \ud835\udc45 R is the horizontal distance covered when the projectile returns to its initial height: \ud835\udc45 \ud835\udc63 0 2 sin \u2061 ( 2 \ud835\udf03 ) \ud835\udc54 R= g v 0 2 \u200b sin(2\u03b8) \u200b Key insights: The range is proportional to \ud835\udc63 0 2 v 0 2 \u200b . The range is maximum when sin \u2061 ( 2 \ud835\udf03 ) = 1 sin(2\u03b8)=1 \u2014 this occurs at \ud835\udf03 = 45 \u2218 \u03b8=45 \u2218 . Gravity \ud835\udc54 g inversely affects the range. \ud83d\udd27 Python Simulation and Visualization Below is the Python code to simulate and visualize projectile motion for different launch angles. \ud83d\udcc1 Code Implementation python Copy Edit import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation \ud83c\udf1f ======================================================= \ud83c\udf1f Problem 1: Investigating the Range as a Function of the Angle of Projection \ud83c\udf1f ======================================================= \ud83d\ude80 Motivation: Projectile motion is a classic topic in physics that explores the path of an object thrown in the air. Analyzing the range as a function of the projection angle reveals interesting insights into kinematics. \ud83d\udcda Theoretical Foundation: Initial velocity components: - Horizontal: v0x = v0 * cos(theta) - Vertical: v0y = v0 * sin(theta) Equations of motion: x(t) = v0 * cos(theta) * t y(t) = v0 * sin(theta) * t - 0.5 * g * t\u00b2 \ud83c\udfaf Range Formula: R = (v0\u00b2 * sin(2 * theta)) / g ======================================================= \ud83d\udd27 Simulation Code ======================================================= def calculate_trajectory(v0, theta_deg, g=9.8, h0=0, time_step=0.01): \"\"\" Calculate the trajectory of a projectile. Args: v0 (float): Initial velocity (m/s) theta_deg (float): Launch angle (degrees) g (float): Gravitational acceleration (m/s\u00b2) h0 (float): Initial height (m) time_step (float): Simulation time step (s) Returns: x, y (ndarray): Horizontal and vertical positions t_flight (float): Time of flight \"\"\" theta = np.radians(theta_deg) v0x = v0 * np.cos(theta) v0y = v0 * np.sin(theta) discriminant = v0y**2 + 2 * g * h0 if discriminant < 0: return [], [], 0 # No real solutions (no flight) t_flight = (v0y + np.sqrt(discriminant)) / g t = np.arange(0, t_flight + time_step, time_step) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return x, y, t_flight def calculate_range(v0, theta_deg, g=9.8, h0=0): \"\"\" Calculate the range of a projectile. \"\"\" x, y, _ = calculate_trajectory(v0, theta_deg, g, h0) if len(x) > 0: landing_idx = np.where(y < 0)[0] if len(landing_idx) > 0: idx = landing_idx[0] if idx > 0: x_range = x[idx - 1] + (x[idx] - x[idx - 1]) * (-y[idx - 1]) / (y[idx] - y[idx - 1]) return x_range return x[-1] return 0 \ud83d\udcca Visualization v0 = 20 # Initial velocity (m/s) theta_values = np.arange(5, 86, 5) # Angles from 5\u00b0 to 85\u00b0 g = 9.8 # Gravity (m/s\u00b2) ranges = [calculate_range(v0, theta, g) for theta in theta_values] max_range = max(ranges) optimal_angle = theta_values[np.argmax(ranges)] \ud83d\udcc8 Range vs Launch Angle plt.figure(figsize=(10, 6)) plt.plot(theta_values, ranges, 'b-', label='Range vs Angle') plt.plot(optimal_angle, max_range, 'ro', label=f'Max Range: {max_range:.2f} m at {optimal_angle}\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('\ud83c\udfaf Range vs Launch Angle') plt.grid(True) plt.legend() \ud83d\udcc9 Trajectories for Selected Angles angles = [15, 30, 45, 60, 75] colors = ['r', 'g', 'b', 'c', 'm'] plt.figure(figsize=(12, 6)) for angle, color in zip(angles, colors): x, y, _ = calculate_trajectory(v0, angle, g) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('\ud83c\udfaf Trajectories for Different Launch Angles') plt.grid(True) plt.legend() plt.ylim(0) plt.show() \ud83d\udd0e Conclusion This exploration combined theoretical analysis and Python-based simulation to understand the relationship between launch angle and range. The maximum range is achieved at a 45\u00b0 launch angle under ideal conditions, matching theoretical predictions. Adjusting parameters like initial velocity or gravity allows for further exploration of real-world scenarios.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#r","text":"\ud835\udc63 0 2 sin \u2061 ( 2 \ud835\udf03 ) \ud835\udc54 R= g v 0 2 \u200b sin(2\u03b8) \u200b Key insights: The range is proportional to \ud835\udc63 0 2 v 0 2 \u200b . The range is maximum when sin \u2061 ( 2 \ud835\udf03 ) = 1 sin(2\u03b8)=1 \u2014 this occurs at \ud835\udf03 = 45 \u2218 \u03b8=45 \u2218 . Gravity \ud835\udc54 g inversely affects the range. \ud83d\udd27 Python Simulation and Visualization Below is the Python code to simulate and visualize projectile motion for different launch angles. \ud83d\udcc1 Code Implementation python Copy Edit import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation","title":"\ud835\udc45"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_1","text":"","title":"\ud83c\udf1f ======================================================="},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"\ud83c\udf1f Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_2","text":"","title":"\ud83c\udf1f ======================================================="},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"","title":"\ud83d\ude80 Motivation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-is-a-classic-topic-in-physics-that-explores-the-path-of-an-object-thrown-in-the-air","text":"","title":"Projectile motion is a classic topic in physics that explores the path of an object thrown in the air."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analyzing-the-range-as-a-function-of-the-projection-angle-reveals-interesting-insights-into-kinematics","text":"","title":"Analyzing the range as a function of the projection angle reveals interesting insights into kinematics."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"","title":"\ud83d\udcda Theoretical Foundation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#initial-velocity-components","text":"","title":"Initial velocity components:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#-horizontal-v0x-v0-costheta","text":"","title":"- Horizontal: v0x = v0 * cos(theta)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#-vertical-v0y-v0-sintheta","text":"","title":"- Vertical: v0y = v0 * sin(theta)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"","title":"Equations of motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#xt-v0-costheta-t","text":"","title":"x(t) = v0 * cos(theta) * t"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#yt-v0-sintheta-t-05-g-t2","text":"","title":"y(t) = v0 * sin(theta) * t - 0.5 * g * t\u00b2"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-formula","text":"","title":"\ud83c\udfaf Range Formula:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#r-v02-sin2-theta-g","text":"","title":"R = (v0\u00b2 * sin(2 * theta)) / g"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_3","text":"","title":"======================================================="},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulation-code","text":"","title":"\ud83d\udd27 Simulation Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_4","text":"def calculate_trajectory(v0, theta_deg, g=9.8, h0=0, time_step=0.01): \"\"\" Calculate the trajectory of a projectile. Args: v0 (float): Initial velocity (m/s) theta_deg (float): Launch angle (degrees) g (float): Gravitational acceleration (m/s\u00b2) h0 (float): Initial height (m) time_step (float): Simulation time step (s) Returns: x, y (ndarray): Horizontal and vertical positions t_flight (float): Time of flight \"\"\" theta = np.radians(theta_deg) v0x = v0 * np.cos(theta) v0y = v0 * np.sin(theta) discriminant = v0y**2 + 2 * g * h0 if discriminant < 0: return [], [], 0 # No real solutions (no flight) t_flight = (v0y + np.sqrt(discriminant)) / g t = np.arange(0, t_flight + time_step, time_step) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return x, y, t_flight def calculate_range(v0, theta_deg, g=9.8, h0=0): \"\"\" Calculate the range of a projectile. \"\"\" x, y, _ = calculate_trajectory(v0, theta_deg, g, h0) if len(x) > 0: landing_idx = np.where(y < 0)[0] if len(landing_idx) > 0: idx = landing_idx[0] if idx > 0: x_range = x[idx - 1] + (x[idx] - x[idx - 1]) * (-y[idx - 1]) / (y[idx] - y[idx - 1]) return x_range return x[-1] return 0","title":"======================================================="},{"location":"1%20Physics/1%20Mechanics/Problem_1/#visualization","text":"v0 = 20 # Initial velocity (m/s) theta_values = np.arange(5, 86, 5) # Angles from 5\u00b0 to 85\u00b0 g = 9.8 # Gravity (m/s\u00b2) ranges = [calculate_range(v0, theta, g) for theta in theta_values] max_range = max(ranges) optimal_angle = theta_values[np.argmax(ranges)]","title":"\ud83d\udcca Visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-vs-launch-angle","text":"plt.figure(figsize=(10, 6)) plt.plot(theta_values, ranges, 'b-', label='Range vs Angle') plt.plot(optimal_angle, max_range, 'ro', label=f'Max Range: {max_range:.2f} m at {optimal_angle}\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('\ud83c\udfaf Range vs Launch Angle') plt.grid(True) plt.legend()","title":"\ud83d\udcc8 Range vs Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectories-for-selected-angles","text":"angles = [15, 30, 45, 60, 75] colors = ['r', 'g', 'b', 'c', 'm'] plt.figure(figsize=(12, 6)) for angle, color in zip(angles, colors): x, y, _ = calculate_trajectory(v0, angle, g) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('\ud83c\udfaf Trajectories for Different Launch Angles') plt.grid(True) plt.legend() plt.ylim(0) plt.show() \ud83d\udd0e Conclusion This exploration combined theoretical analysis and Python-based simulation to understand the relationship between launch angle and range. The maximum range is achieved at a 45\u00b0 launch angle under ideal conditions, matching theoretical predictions. Adjusting parameters like initial velocity or gravity allows for further exploration of real-world scenarios.","title":"\ud83d\udcc9 Trajectories for Selected Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}