{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion is a classic physics problem that bridges simplicity and complexity. By studying how the range depends on the angle of projection, we uncover a mix of linear and quadratic relationships, governed by initial conditions like velocity, gravity, and height. This exploration connects to real-world scenarios\u2014think of a basketball shot, a cannonball, or even a spacecraft launch! 1. Theoretical Foundation Let\u2019s derive the equations from Newton\u2019s laws. For a projectile launched with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal, with no air resistance: Horizontal motion : \\( x(t) = v_0 \\cos(\\theta) t \\) Vertical motion : \\( y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\) Time of flight ( \\( T \\) ) is when \\( y = 0 \\) (assuming launch and landing at same height): [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] Range ( \\( R \\) ) is the horizontal distance: [ R = v_0 \\cos(\\theta) \\cdot T = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} ] Using the identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This is the family of solutions\u2014range depends on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) . 2. Analysis of the Range Angle Dependence : \\( R \\) peaks at \\( \\theta = 45^\\circ \\) (since \\( \\sin(2\\theta) = 1 \\) at \\( 90^\\circ \\) ). Parameters : Higher \\( v_0 \\) increases \\( R \\) , while stronger \\( g \\) reduces it. 3. Practical Applications Sports : Optimizing a javelin throw. Engineering : Artillery range calculations. Uneven Terrain : Adjust \\( y_0 \\) (initial height) in the model. 4. Implementation Let\u2019s simulate this in Python with stunning visuals using matplotlib and numpy . Python Code ```python import numpy as np import matplotlib.pyplot as plt from matplotlib import style Set a sleek style style.use('seaborn-darkgrid') Constants g = 9.81 # m/s^2 (gravity) Function to calculate range def projectile_range(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g Simulation parameters angles = np.arange(0, 91, 1) # 0 to 90 degrees v0_values = [10, 20, 30] # Different initial velocities (m/s) g_values = [9.81, 1.62] # Earth and Moon gravity (m/s^2) Plot 1: Range vs Angle for different velocities plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [projectile_range(v0, theta) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s', linewidth=2.5) plt.title('Range vs Angle of Projection (g = 9.81 m/s\u00b2)', fontsize=14, pad=10) plt.xlabel('Angle (degrees)', fontsize=12) plt.ylabel('Range (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show() Plot 2: Range vs Angle for different gravities plt.figure(figsize=(10, 6)) for g in g_values: ranges = [projectile_range(20, theta, g) for theta in angles] plt.plot(angles, ranges, label=f'g = {g} m/s\u00b2', linewidth=2.5) plt.title('Range vs Angle of Projection (v0 = 20 m/s)', fontsize=14, pad=10) plt.xlabel('Angle (degrees)', fontsize=12) plt.ylabel('Range (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show() Plot 3: Trajectory visualization for selected angles def trajectory(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) t_flight = (2 * v0 * np.sin(theta_rad)) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y plt.figure(figsize=(12, 7)) angles_to_plot = [15, 45, 75] colors = ['#FF6F61', '#6B5B95', '#88B04B'] for theta, color in zip(angles_to_plot, colors): x, y = trajectory(20, theta) plt.plot(x, y, label=f'{theta}\u00b0', color=color, linewidth=2.5) plt.title('Projectile Trajectories (v0 = 20 m/s, g = 9.81 m/s\u00b2)', fontsize=14, pad=10) plt.xlabel('Range (meters)', fontsize=12) plt.ylabel('Height (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion is a classic physics problem that bridges simplicity and complexity. By studying how the range depends on the angle of projection, we uncover a mix of linear and quadratic relationships, governed by initial conditions like velocity, gravity, and height. This exploration connects to real-world scenarios\u2014think of a basketball shot, a cannonball, or even a spacecraft launch!","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Let\u2019s derive the equations from Newton\u2019s laws. For a projectile launched with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal, with no air resistance: Horizontal motion : \\( x(t) = v_0 \\cos(\\theta) t \\) Vertical motion : \\( y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\) Time of flight ( \\( T \\) ) is when \\( y = 0 \\) (assuming launch and landing at same height): [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] Range ( \\( R \\) ) is the horizontal distance: [ R = v_0 \\cos(\\theta) \\cdot T = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} ] Using the identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This is the family of solutions\u2014range depends on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) .","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"Angle Dependence : \\( R \\) peaks at \\( \\theta = 45^\\circ \\) (since \\( \\sin(2\\theta) = 1 \\) at \\( 90^\\circ \\) ). Parameters : Higher \\( v_0 \\) increases \\( R \\) , while stronger \\( g \\) reduces it.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Optimizing a javelin throw. Engineering : Artillery range calculations. Uneven Terrain : Adjust \\( y_0 \\) (initial height) in the model.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Let\u2019s simulate this in Python with stunning visuals using matplotlib and numpy .","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-code","text":"```python import numpy as np import matplotlib.pyplot as plt from matplotlib import style","title":"Python Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#set-a-sleek-style","text":"style.use('seaborn-darkgrid')","title":"Set a sleek style"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # m/s^2 (gravity)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-range","text":"def projectile_range(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g","title":"Function to calculate range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulation-parameters","text":"angles = np.arange(0, 91, 1) # 0 to 90 degrees v0_values = [10, 20, 30] # Different initial velocities (m/s) g_values = [9.81, 1.62] # Earth and Moon gravity (m/s^2)","title":"Simulation parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-1-range-vs-angle-for-different-velocities","text":"plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [projectile_range(v0, theta) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s', linewidth=2.5) plt.title('Range vs Angle of Projection (g = 9.81 m/s\u00b2)', fontsize=14, pad=10) plt.xlabel('Angle (degrees)', fontsize=12) plt.ylabel('Range (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show()","title":"Plot 1: Range vs Angle for different velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-2-range-vs-angle-for-different-gravities","text":"plt.figure(figsize=(10, 6)) for g in g_values: ranges = [projectile_range(20, theta, g) for theta in angles] plt.plot(angles, ranges, label=f'g = {g} m/s\u00b2', linewidth=2.5) plt.title('Range vs Angle of Projection (v0 = 20 m/s)', fontsize=14, pad=10) plt.xlabel('Angle (degrees)', fontsize=12) plt.ylabel('Range (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show()","title":"Plot 2: Range vs Angle for different gravities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-3-trajectory-visualization-for-selected-angles","text":"def trajectory(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) t_flight = (2 * v0 * np.sin(theta_rad)) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y plt.figure(figsize=(12, 7)) angles_to_plot = [15, 45, 75] colors = ['#FF6F61', '#6B5B95', '#88B04B'] for theta, color in zip(angles_to_plot, colors): x, y = trajectory(20, theta) plt.plot(x, y, label=f'{theta}\u00b0', color=color, linewidth=2.5) plt.title('Projectile Trajectories (v0 = 20 m/s, g = 9.81 m/s\u00b2)', fontsize=14, pad=10) plt.xlabel('Range (meters)', fontsize=12) plt.ylabel('Height (meters)', fontsize=12) plt.legend(fontsize=10) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show()","title":"Plot 3: Trajectory visualization for selected angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}