{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection A Comprehensive Physics and Computational Analysis 1. Theoretical Foundation 1.1 Derivation of Projectile Motion Equations We begin with Newton's second law in 2D for a projectile with initial velocity v\u2080 at angle \u03b8 under gravity g : Horizontal Motion (x-axis): No acceleration \u2192 Uniform motion [ \\frac{d^2x}{dt^2} = 0 \\implies x(t) = v_{0x}t = \\color{#E74C3C}{v_0\\cos\\theta}\\cdot t ] Vertical Motion (y-axis): Constant acceleration (-g) [ \\frac{d^2y}{dt^2} = -g \\implies y(t) = \\color{#E74C3C}{v_0\\sin\\theta}\\cdot t - \\frac{1}{2}\\color{#E74C3C}{g}t^2 ] 1.2 Time of Flight and Range Solving for when the projectile returns to ground (y=0): [ T = \\frac{2\\color{#E74C3C}{v_0\\sin\\theta}}{\\color{#E74C3C}{g}} ] Substituting into x(t) gives the range equation : [ R = \\frac{\\color{#E74C3C}{v_0^2}\\sin(2\\theta)}{\\color{#E74C3C}{g}} \\quad \\text{(Maximum at \u03b8=45\u00b0)} ] 1.3 Family of Solutions The general solution forms a parameterized family based on: - Initial velocity (v\u2080) - Launch angle (\u03b8) - Gravity (g) - Initial height (h\u2080) 2. Range Analysis 2.1 Angle Dependence Key characteristics of the range equation: - Peak range at \u03b8=45\u00b0 (when sin(2\u03b8)=1) - Complementary angles (e.g., 30\u00b0 & 60\u00b0) give equal ranges - Zero range at \u03b8=0\u00b0 and \u03b8=90\u00b0 2.2 Parameter Sensitivity Analysis Parameter Effect Mathematical Relationship v\u2080 Quadratic impact R \u221d v\u2080\u00b2 g Inverse relationship R \u221d 1/g h\u2080 Increases range Modified equation required 3. Practical Applications 3.1 Real-World Modifications Scenario Effect on Projectile Uphill Launch Optimal angle >45\u00b0 Downhill Launch Optimal angle <45\u00b0 Air Resistance Reduces range by 30-50%, optimal angle ~40\u00b0 Spin (Magnus Effect) Creates curved trajectories 4. Computational Implementation 4.1 Python Simulation Code Click to see the Python simulation code import numpy as np import matplotlib.pyplot as plt from ipywidgets import interact def plot_trajectory(v0=20, theta=45, g=9.81, h0=0): theta_rad = np.radians(theta) t_flight = (v0*np.sin(theta_rad) + np.sqrt((v0*np.sin(theta_rad))**2 + 2*g*h0))/g t = np.linspace(0, t_flight, 100) x = v0*np.cos(theta_rad)*t y = h0 + v0*np.sin(theta_rad)*t - 0.5*g*t**2 plt.figure(figsize=(10,5)) plt.plot(x, y, 'b-', linewidth=2) plt.title(f'Projectile Trajectory (\u03b8={theta}\u00b0, v\u2080={v0}m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.grid() plt.ylim(0, max(y)*1.2) interact(plot_trajectory, v0=(5,50,5), theta=(0,90,5), g=(1.62,24.79,0.1), h0=(0,20,1)) 4.2 Key Visualizations Range vs Angle Curves Trajectories for Different Launch Angles 5. Deliverables 5.1 Complete Analysis Package Jupyter Notebook with: Interactive trajectory simulator Parameter sensitivity plots Planetary environment comparisons 5.2 Limitations and Extensions Current Limitations: - No air resistance - Flat Earth assumption - 2D-only simulation Advanced Extensions: 1. Drag Force Model [ F_{drag} = -\\frac{1}{2}C_d\\rho Av^2 ] 2. Wind Effects - Crosswind compensation 3. 3D Simulation - Coriolis effect for long-range projectiles Conclusion: This investigation bridges fundamental physics with practical applications through computational modeling. The color-coded equations and interactive visualizations enhance understanding of how projectile range depends on launch parameters, while identifying avenues for more sophisticated real-world modeling. Complete code and interactive demos available in the supplementary materials. ``` Changes made: 1. Color-coded the section and subsection headers with different colors. 2. Wrapped the Python code inside the <details> and <summary> tags to hide it initially with a \"Click to see\" option. 3. Ensured that visualizations and key insights are highlighted effectively.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"A Comprehensive Physics and Computational Analysis","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-derivation-of-projectile-motion-equations","text":"We begin with Newton's second law in 2D for a projectile with initial velocity v\u2080 at angle \u03b8 under gravity g : Horizontal Motion (x-axis): No acceleration \u2192 Uniform motion [ \\frac{d^2x}{dt^2} = 0 \\implies x(t) = v_{0x}t = \\color{#E74C3C}{v_0\\cos\\theta}\\cdot t ] Vertical Motion (y-axis): Constant acceleration (-g) [ \\frac{d^2y}{dt^2} = -g \\implies y(t) = \\color{#E74C3C}{v_0\\sin\\theta}\\cdot t - \\frac{1}{2}\\color{#E74C3C}{g}t^2 ]","title":"1.1 Derivation of Projectile Motion Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-time-of-flight-and-range","text":"Solving for when the projectile returns to ground (y=0): [ T = \\frac{2\\color{#E74C3C}{v_0\\sin\\theta}}{\\color{#E74C3C}{g}} ] Substituting into x(t) gives the range equation : [ R = \\frac{\\color{#E74C3C}{v_0^2}\\sin(2\\theta)}{\\color{#E74C3C}{g}} \\quad \\text{(Maximum at \u03b8=45\u00b0)} ]","title":"1.2 Time of Flight and Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-family-of-solutions","text":"The general solution forms a parameterized family based on: - Initial velocity (v\u2080) - Launch angle (\u03b8) - Gravity (g) - Initial height (h\u2080)","title":"1.3 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-range-analysis","text":"","title":"2. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-angle-dependence","text":"Key characteristics of the range equation: - Peak range at \u03b8=45\u00b0 (when sin(2\u03b8)=1) - Complementary angles (e.g., 30\u00b0 & 60\u00b0) give equal ranges - Zero range at \u03b8=0\u00b0 and \u03b8=90\u00b0","title":"2.1 Angle Dependence"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-parameter-sensitivity-analysis","text":"Parameter Effect Mathematical Relationship v\u2080 Quadratic impact R \u221d v\u2080\u00b2 g Inverse relationship R \u221d 1/g h\u2080 Increases range Modified equation required","title":"2.2 Parameter Sensitivity Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-real-world-modifications","text":"Scenario Effect on Projectile Uphill Launch Optimal angle >45\u00b0 Downhill Launch Optimal angle <45\u00b0 Air Resistance Reduces range by 30-50%, optimal angle ~40\u00b0 Spin (Magnus Effect) Creates curved trajectories","title":"3.1 Real-World Modifications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-computational-implementation","text":"","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#41-python-simulation-code","text":"Click to see the Python simulation code import numpy as np import matplotlib.pyplot as plt from ipywidgets import interact def plot_trajectory(v0=20, theta=45, g=9.81, h0=0): theta_rad = np.radians(theta) t_flight = (v0*np.sin(theta_rad) + np.sqrt((v0*np.sin(theta_rad))**2 + 2*g*h0))/g t = np.linspace(0, t_flight, 100) x = v0*np.cos(theta_rad)*t y = h0 + v0*np.sin(theta_rad)*t - 0.5*g*t**2 plt.figure(figsize=(10,5)) plt.plot(x, y, 'b-', linewidth=2) plt.title(f'Projectile Trajectory (\u03b8={theta}\u00b0, v\u2080={v0}m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.grid() plt.ylim(0, max(y)*1.2) interact(plot_trajectory, v0=(5,50,5), theta=(0,90,5), g=(1.62,24.79,0.1), h0=(0,20,1))","title":"4.1 Python Simulation Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#42-key-visualizations","text":"Range vs Angle Curves Trajectories for Different Launch Angles","title":"4.2 Key Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-deliverables","text":"","title":"5. Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#51-complete-analysis-package","text":"Jupyter Notebook with: Interactive trajectory simulator Parameter sensitivity plots Planetary environment comparisons","title":"5.1 Complete Analysis Package"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#52-limitations-and-extensions","text":"Current Limitations: - No air resistance - Flat Earth assumption - 2D-only simulation Advanced Extensions: 1. Drag Force Model [ F_{drag} = -\\frac{1}{2}C_d\\rho Av^2 ] 2. Wind Effects - Crosswind compensation 3. 3D Simulation - Coriolis effect for long-range projectiles Conclusion: This investigation bridges fundamental physics with practical applications through computational modeling. The color-coded equations and interactive visualizations enhance understanding of how projectile range depends on launch parameters, while identifying avenues for more sophisticated real-world modeling. Complete code and interactive demos available in the supplementary materials. ``` Changes made: 1. Color-coded the section and subsection headers with different colors. 2. Wrapped the Python code inside the <details> and <summary> tags to hide it initially with a \"Click to see\" option. 3. Ensured that visualizations and key insights are highlighted effectively.","title":"5.2 Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum Theoretical Foundation The forced damped pendulum is governed by the following nonlinear differential equation: \u03b8'' + (b/m)\u03b8' + (g/L)sin\u03b8 = (F/mL)cos(\u03c9_d t) Where: - \u03b8 is the angular displacement - b is the damping coefficient - m is the mass of the bob - L is the length of the pendulum - g is gravitational acceleration - F is the amplitude of the driving force - \u03c9_d is the driving frequency Small-angle approximation For small oscillations (\u03b8 << 1), we can approximate sin\u03b8 \u2248 \u03b8, which linearizes the equation: \u03b8'' + (b/m)\u03b8' + (g/L)\u03b8 = (F/mL)cos(\u03c9_d t) This is the equation of a driven, damped harmonic oscillator with: - Natural frequency \u03c9_0 = \u221a(g/L) - Damping ratio \u03b3 = b/(2m) Resonance conditions The system exhibits resonance when the driving frequency \u03c9_d approaches the damped natural frequency: \u03c9_res = \u221a(\u03c9_0\u00b2 - 2\u03b3\u00b2) At resonance, the system absorbs maximum energy from the driving force, leading to large amplitude oscillations. The quality factor Q = \u03c9_0/(2\u03b3) determines the sharpness of the resonance peak. Analysis of Dynamics The behavior of the forced damped pendulum depends critically on three parameters: 1. Damping coefficient (b/m) - determines how quickly oscillations decay 2. Driving amplitude (F/mL) - controls the energy input to the system 3. Driving frequency (\u03c9_d) - relative to natural frequency affects resonance Regular vs. chaotic motion For small driving forces, the system settles into periodic motion synchronized with the driving frequency (period-1 or higher periodic orbits). As the driving amplitude increases, the system can transition to: - Quasiperiodic motion (two incommensurate frequencies) - Chaotic motion (sensitive dependence on initial conditions) Practical Applications Energy harvesting devices : Pendulum-based systems convert mechanical vibrations to electrical energy Suspension bridges : Modeling resonant effects from wind or pedestrian loading Oscillating circuits : Electrical analogs (RLC circuits with AC sources) Seismology : Modeling building responses to earthquake vibrations Biological rhythms : Circadian clocks under external forcing Implementation See Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # pendulum length (m) b = 0.5 # damping coefficient (kg/s) m = 1.0 # mass (kg) F = 1.2 # driving amplitude (N) \u03c9_d = 2.0 # driving frequency (rad/s) # Differential equation def forced_pendulum(t, y): \u03b8, \u03c9 = y d\u03b8dt = \u03c9 d\u03c9dt = -(b/m)*\u03c9 - (g/L)*np.sin(\u03b8) + (F/(m*L))*np.cos(\u03c9_d*t) return [d\u03b8dt, d\u03c9dt] # Initial conditions and time span y0 = [0.1, 0] # initial angle and angular velocity t_span = (0, 100) # simulation time t_eval = np.linspace(*t_span, 3000) # evaluation points # Solve the ODE sol = solve_ivp(forced_pendulum, t_span, y0, t_eval=t_eval, rtol=1e-6, atol=1e-8) # Plotting plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(sol.t, sol.y[0], label='\u03b8(t)') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Angular Displacement vs Time') plt.grid() # Phase portrait plt.subplot(2, 2, 2) plt.plot(sol.y[0], sol.y[1]) plt.xlabel('Angle \u03b8 (rad)') plt.ylabel('Angular velocity \u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid() # Poincar\u00e9 section (stroboscopic map at driving period) drive_period = 2*np.pi/\u03c9_d poincare_times = np.arange(50, 100, drive_period) # skip transient poincare_points = [] for t in poincare_times: idx = np.argmin(np.abs(sol.t - t)) poincare_points.append(sol.y[:, idx]) poincare_points = np.array(poincare_points).T plt.subplot(2, 2, 3) plt.scatter(poincare_points[0], poincare_points[1], s=10) plt.xlabel('\u03b8 at Poincar\u00e9 section') plt.ylabel('\u03c9 at Poincar\u00e9 section') plt.title('Poincar\u00e9 Section (Stroboscopic Map)') plt.grid() # Frequency spectrum (FFT) plt.subplot(2, 2, 4) n = len(sol.y[0]) freq = np.fft.fftfreq(n, d=sol.t[1]-sol.t[0]) fft_vals = np.fft.fft(sol.y[0]) plt.plot(freq[:n//2], np.abs(fft_vals[:n//2])) plt.xlabel('Frequency (Hz)') plt.ylabel('Amplitude') plt.title('Frequency Spectrum') plt.grid() plt.tight_layout() plt.show() Results and Analysis The simulation shows several characteristic behaviors: Periodic motion : For small F, the pendulum synchronizes with the driving frequency Subharmonic response : Period doubling and higher-order periods appear as F increases Chaotic motion : At certain parameters, the Poincar\u00e9 section shows fractal-like structure Bifurcation Analysis To visualize the transition to chaos, we can create a bifurcation diagram by varying one parameter (e.g., driving force F): See Code # Bifurcation diagram (varying F) F_values = np.linspace(0.5, 1.5, 200) bifurcation_points = [] for F in F_values: sol = solve_ivp(forced_pendulum, (0, 500), y0, t_eval=np.linspace(0, 500, 5000), rtol=1e-6, atol=1e-8) # Record \u03b8 values at driving period after transient transient = 300 \u03b8_points = [] for t in np.arange(transient, 500, 2*np.pi/\u03c9_d): idx = np.argmin(np.abs(sol.t - t)) \u03b8_points.append(sol.y[0, idx]) bifurcation_points.append(\u03b8_points[-50:]) # last 50 points plt.figure(figsize=(10, 6)) for i, F in enumerate(F_values): plt.plot([F]*len(bifurcation_points[i]), bifurcation_points[i], 'b.', markersize=1, alpha=0.5) plt.xlabel('Driving Force Amplitude F (N)') plt.ylabel('Stable Points in Poincar\u00e9 Section') plt.title('Bifurcation Diagram (Varying Driving Force)') plt.grid() plt.show() Limitations and Extensions Limitations : Small-angle approximation breaks down for large oscillations Assumes point mass and massless rod Neglects air resistance nonlinearities Doesn't account for elastic deformations Extensions : Nonlinear damping terms (e.g., quadratic air resistance) Double pendulum or coupled pendulums Non-periodic driving forces (e.g., stochastic forcing) Parametric excitation (moving pivot point) Conclusion The forced damped pendulum exhibits a rich variety of behaviors from simple periodic motion to complex chaos. Numerical simulations reveal how parameter variations lead to qualitatively different dynamics, with applications across physics and engineering. The transition to chaos through period doubling is a fundamental route observed in many nonlinear systems. Further investigations could explore: - Basins of attraction for different initial conditions - Lyapunov exponents to quantify chaotic behavior - Control strategies to stabilize unstable periodic orbits - Experimental validation with physical pendulum setups With these updates, the Python code is now hidden behind clickable sections, and the section headings are color-coded to visually enhance the content.","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"The forced damped pendulum is governed by the following nonlinear differential equation: \u03b8'' + (b/m)\u03b8' + (g/L)sin\u03b8 = (F/mL)cos(\u03c9_d t) Where: - \u03b8 is the angular displacement - b is the damping coefficient - m is the mass of the bob - L is the length of the pendulum - g is gravitational acceleration - F is the amplitude of the driving force - \u03c9_d is the driving frequency","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations (\u03b8 << 1), we can approximate sin\u03b8 \u2248 \u03b8, which linearizes the equation: \u03b8'' + (b/m)\u03b8' + (g/L)\u03b8 = (F/mL)cos(\u03c9_d t) This is the equation of a driven, damped harmonic oscillator with: - Natural frequency \u03c9_0 = \u221a(g/L) - Damping ratio \u03b3 = b/(2m)","title":"Small-angle approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"The system exhibits resonance when the driving frequency \u03c9_d approaches the damped natural frequency: \u03c9_res = \u221a(\u03c9_0\u00b2 - 2\u03b3\u00b2) At resonance, the system absorbs maximum energy from the driving force, leading to large amplitude oscillations. The quality factor Q = \u03c9_0/(2\u03b3) determines the sharpness of the resonance peak.","title":"Resonance conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"The behavior of the forced damped pendulum depends critically on three parameters: 1. Damping coefficient (b/m) - determines how quickly oscillations decay 2. Driving amplitude (F/mL) - controls the energy input to the system 3. Driving frequency (\u03c9_d) - relative to natural frequency affects resonance","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#regular-vs-chaotic-motion","text":"For small driving forces, the system settles into periodic motion synchronized with the driving frequency (period-1 or higher periodic orbits). As the driving amplitude increases, the system can transition to: - Quasiperiodic motion (two incommensurate frequencies) - Chaotic motion (sensitive dependence on initial conditions)","title":"Regular vs. chaotic motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy harvesting devices : Pendulum-based systems convert mechanical vibrations to electrical energy Suspension bridges : Modeling resonant effects from wind or pedestrian loading Oscillating circuits : Electrical analogs (RLC circuits with AC sources) Seismology : Modeling building responses to earthquake vibrations Biological rhythms : Circadian clocks under external forcing","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"See Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # pendulum length (m) b = 0.5 # damping coefficient (kg/s) m = 1.0 # mass (kg) F = 1.2 # driving amplitude (N) \u03c9_d = 2.0 # driving frequency (rad/s) # Differential equation def forced_pendulum(t, y): \u03b8, \u03c9 = y d\u03b8dt = \u03c9 d\u03c9dt = -(b/m)*\u03c9 - (g/L)*np.sin(\u03b8) + (F/(m*L))*np.cos(\u03c9_d*t) return [d\u03b8dt, d\u03c9dt] # Initial conditions and time span y0 = [0.1, 0] # initial angle and angular velocity t_span = (0, 100) # simulation time t_eval = np.linspace(*t_span, 3000) # evaluation points # Solve the ODE sol = solve_ivp(forced_pendulum, t_span, y0, t_eval=t_eval, rtol=1e-6, atol=1e-8) # Plotting plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(sol.t, sol.y[0], label='\u03b8(t)') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Angular Displacement vs Time') plt.grid() # Phase portrait plt.subplot(2, 2, 2) plt.plot(sol.y[0], sol.y[1]) plt.xlabel('Angle \u03b8 (rad)') plt.ylabel('Angular velocity \u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid() # Poincar\u00e9 section (stroboscopic map at driving period) drive_period = 2*np.pi/\u03c9_d poincare_times = np.arange(50, 100, drive_period) # skip transient poincare_points = [] for t in poincare_times: idx = np.argmin(np.abs(sol.t - t)) poincare_points.append(sol.y[:, idx]) poincare_points = np.array(poincare_points).T plt.subplot(2, 2, 3) plt.scatter(poincare_points[0], poincare_points[1], s=10) plt.xlabel('\u03b8 at Poincar\u00e9 section') plt.ylabel('\u03c9 at Poincar\u00e9 section') plt.title('Poincar\u00e9 Section (Stroboscopic Map)') plt.grid() # Frequency spectrum (FFT) plt.subplot(2, 2, 4) n = len(sol.y[0]) freq = np.fft.fftfreq(n, d=sol.t[1]-sol.t[0]) fft_vals = np.fft.fft(sol.y[0]) plt.plot(freq[:n//2], np.abs(fft_vals[:n//2])) plt.xlabel('Frequency (Hz)') plt.ylabel('Amplitude') plt.title('Frequency Spectrum') plt.grid() plt.tight_layout() plt.show()","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#results-and-analysis","text":"The simulation shows several characteristic behaviors: Periodic motion : For small F, the pendulum synchronizes with the driving frequency Subharmonic response : Period doubling and higher-order periods appear as F increases Chaotic motion : At certain parameters, the Poincar\u00e9 section shows fractal-like structure","title":"Results and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-analysis","text":"To visualize the transition to chaos, we can create a bifurcation diagram by varying one parameter (e.g., driving force F): See Code # Bifurcation diagram (varying F) F_values = np.linspace(0.5, 1.5, 200) bifurcation_points = [] for F in F_values: sol = solve_ivp(forced_pendulum, (0, 500), y0, t_eval=np.linspace(0, 500, 5000), rtol=1e-6, atol=1e-8) # Record \u03b8 values at driving period after transient transient = 300 \u03b8_points = [] for t in np.arange(transient, 500, 2*np.pi/\u03c9_d): idx = np.argmin(np.abs(sol.t - t)) \u03b8_points.append(sol.y[0, idx]) bifurcation_points.append(\u03b8_points[-50:]) # last 50 points plt.figure(figsize=(10, 6)) for i, F in enumerate(F_values): plt.plot([F]*len(bifurcation_points[i]), bifurcation_points[i], 'b.', markersize=1, alpha=0.5) plt.xlabel('Driving Force Amplitude F (N)') plt.ylabel('Stable Points in Poincar\u00e9 Section') plt.title('Bifurcation Diagram (Varying Driving Force)') plt.grid() plt.show()","title":"Bifurcation Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations-and-extensions","text":"Limitations : Small-angle approximation breaks down for large oscillations Assumes point mass and massless rod Neglects air resistance nonlinearities Doesn't account for elastic deformations Extensions : Nonlinear damping terms (e.g., quadratic air resistance) Double pendulum or coupled pendulums Non-periodic driving forces (e.g., stochastic forcing) Parametric excitation (moving pivot point)","title":"Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"The forced damped pendulum exhibits a rich variety of behaviors from simple periodic motion to complex chaos. Numerical simulations reveal how parameter variations lead to qualitatively different dynamics, with applications across physics and engineering. The transition to chaos through period doubling is a fundamental route observed in many nonlinear systems. Further investigations could explore: - Basins of attraction for different initial conditions - Lyapunov exponents to quantify chaotic behavior - Control strategies to stabilize unstable periodic orbits - Experimental validation with physical pendulum setups With these updates, the Python code is now hidden behind clickable sections, and the section headings are color-coded to visually enhance the content.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}