{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection A Comprehensive Physics and Computational Analysis 1. Theoretical Foundation 1.1 Derivation of Projectile Motion Equations We begin with Newton's second law in 2D for a projectile with initial velocity v\u2080 at angle \u03b8 under gravity g : Horizontal Motion (x-axis): No acceleration \u2192 Uniform motion $$ \\frac{d^2x}{dt^2} = 0 \\implies x(t) = v_{0x}t = \\color{#E74C3C}{v_0\\cos\\theta} \\cdot t $$ Vertical Motion (y-axis): Constant acceleration (-g) $$ \\frac{d^2y}{dt^2} = -g \\implies y(t) = \\color{#E74C3C}{v_0\\sin\\theta}\\cdot t - \\frac{1}{2}\\color{#E74C3C}{g}t^2 $$ 1.2 Time of Flight and Range Solving for when the projectile returns to ground (y=0): $$ T = \\frac{2\\color{#E74C3C}{v_0\\sin\\theta}}{\\color{#E74C3C}{g}} $$ Substituting into \\( x(t) \\) gives the range equation : $$ R = \\frac{\\color{#E74C3C}{v_0^2}\\sin(2\\theta)}{\\color{#E74C3C}{g}} \\quad \\text{(Maximum at \u03b8=45\u00b0)} $$ 1.3 Family of Solutions The general solution forms a parameterized family based on: - Initial velocity (v\u2080) - Launch angle (\u03b8) - Gravity (g) - Initial height (h\u2080) 2. Range Analysis 2.1 Angle Dependence Key characteristics of the range equation: - Peak range at \u03b8=45\u00b0 (when sin(2\u03b8)=1) - Complementary angles (e.g., 30\u00b0 & 60\u00b0) give equal ranges - Zero range at \u03b8=0\u00b0 and \u03b8=90\u00b0 2.2 Parameter Sensitivity Analysis Parameter Effect Mathematical Relationship v\u2080 Quadratic impact \\( R \\propto v_0^2 \\) g Inverse relationship \\( R \\propto \\frac{1}{g} \\) h\u2080 Increases range Modified equation required 3. Practical Applications 3.1 Real-World Modifications Scenario Effect on Projectile Uphill Launch Optimal angle >45\u00b0 Downhill Launch Optimal angle <45\u00b0 Air Resistance Reduces range by 30-50%, optimal angle ~40\u00b0 Spin (Magnus Effect) Creates curved trajectories 4. Computational Implementation 4.1 Python Simulation Code Click to see the Python simulation code import numpy as np import matplotlib.pyplot as plt from ipywidgets import interact def plot_trajectory(v0=20, theta=45, g=9.81, h0=0): theta_rad = np.radians(theta) t_flight = (v0*np.sin(theta_rad) + np.sqrt((v0*np.sin(theta_rad))**2 + 2*g*h0))/g t = np.linspace(0, t_flight, 100) x = v0*np.cos(theta_rad)*t y = h0 + v0*np.sin(theta_rad)*t - 0.5*g*t**2 plt.figure(figsize=(10,5)) plt.plot(x, y, 'b-', linewidth=2) plt.title(f'Projectile Trajectory (\u03b8={theta}\u00b0, v\u2080={v0}m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.grid() plt.ylim(0, max(y)*1.2) interact(plot_trajectory, v0=(5,50,5), theta=(0,90,5), g=(1.62,24.79,0.1), h0=(0,20,1)) 4.2 Key Visualizations Range vs Angle Curves The graph illustrates the relationship between the launch angle (\u03b8) and the resulting range (R) of a projectile in the absence of air resistance. It shows a parabolic pattern, peaking at 45\u00b0, where the range is maximized. Complementary angles (like 30\u00b0 and 60\u00b0) produce identical ranges, highlighting the symmetry of projectile motion. The absence of air resistance simplifies the motion, ensuring that only gravity influences the projectile's path. Trajectories for Different Launch Angles This diagram depicts the trajectories of a projectile launched at different angles\u201430\u00b0, 45\u00b0, 60\u00b0, and 75\u00b0. The optimal range occurs at a launch angle of 45\u00b0, where the balance between horizontal and vertical components of velocity is ideal. As the angle increases beyond 45\u00b0, the height increases, but the horizontal range decreases. This visualization demonstrates the compromise between height and distance in projectile motion. 5. Deliverables 5.1 Complete Analysis Package Jupyter Notebook with: Interactive trajectory simulator Parameter sensitivity plots Planetary environment comparisons 5.2 Limitations and Extensions Current Limitations: - No air resistance - Flat Earth assumption - 2D-only simulation Advanced Extensions: 1. Drag Force Model $$ F_{\\text{drag}} = -\\frac{1}{2}C_d\\rho A v^2 $$ 2. Wind Effects - Crosswind compensation 3. 3D Simulation - Coriolis effect for long-range projectiles Conclusion: This investigation bridges fundamental physics with practical applications through computational modeling. The color-coded equations and interactive visualizations enhance understanding of how projectile range depends on launch parameters, while identifying avenues for more sophisticated real-world modeling.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"A Comprehensive Physics and Computational Analysis","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-derivation-of-projectile-motion-equations","text":"We begin with Newton's second law in 2D for a projectile with initial velocity v\u2080 at angle \u03b8 under gravity g : Horizontal Motion (x-axis): No acceleration \u2192 Uniform motion $$ \\frac{d^2x}{dt^2} = 0 \\implies x(t) = v_{0x}t = \\color{#E74C3C}{v_0\\cos\\theta} \\cdot t $$ Vertical Motion (y-axis): Constant acceleration (-g) $$ \\frac{d^2y}{dt^2} = -g \\implies y(t) = \\color{#E74C3C}{v_0\\sin\\theta}\\cdot t - \\frac{1}{2}\\color{#E74C3C}{g}t^2 $$","title":"1.1 Derivation of Projectile Motion Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-time-of-flight-and-range","text":"Solving for when the projectile returns to ground (y=0): $$ T = \\frac{2\\color{#E74C3C}{v_0\\sin\\theta}}{\\color{#E74C3C}{g}} $$ Substituting into \\( x(t) \\) gives the range equation : $$ R = \\frac{\\color{#E74C3C}{v_0^2}\\sin(2\\theta)}{\\color{#E74C3C}{g}} \\quad \\text{(Maximum at \u03b8=45\u00b0)} $$","title":"1.2 Time of Flight and Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-family-of-solutions","text":"The general solution forms a parameterized family based on: - Initial velocity (v\u2080) - Launch angle (\u03b8) - Gravity (g) - Initial height (h\u2080)","title":"1.3 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-range-analysis","text":"","title":"2. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-angle-dependence","text":"Key characteristics of the range equation: - Peak range at \u03b8=45\u00b0 (when sin(2\u03b8)=1) - Complementary angles (e.g., 30\u00b0 & 60\u00b0) give equal ranges - Zero range at \u03b8=0\u00b0 and \u03b8=90\u00b0","title":"2.1 Angle Dependence"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-parameter-sensitivity-analysis","text":"Parameter Effect Mathematical Relationship v\u2080 Quadratic impact \\( R \\propto v_0^2 \\) g Inverse relationship \\( R \\propto \\frac{1}{g} \\) h\u2080 Increases range Modified equation required","title":"2.2 Parameter Sensitivity Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-real-world-modifications","text":"Scenario Effect on Projectile Uphill Launch Optimal angle >45\u00b0 Downhill Launch Optimal angle <45\u00b0 Air Resistance Reduces range by 30-50%, optimal angle ~40\u00b0 Spin (Magnus Effect) Creates curved trajectories","title":"3.1 Real-World Modifications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-computational-implementation","text":"","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#41-python-simulation-code","text":"Click to see the Python simulation code import numpy as np import matplotlib.pyplot as plt from ipywidgets import interact def plot_trajectory(v0=20, theta=45, g=9.81, h0=0): theta_rad = np.radians(theta) t_flight = (v0*np.sin(theta_rad) + np.sqrt((v0*np.sin(theta_rad))**2 + 2*g*h0))/g t = np.linspace(0, t_flight, 100) x = v0*np.cos(theta_rad)*t y = h0 + v0*np.sin(theta_rad)*t - 0.5*g*t**2 plt.figure(figsize=(10,5)) plt.plot(x, y, 'b-', linewidth=2) plt.title(f'Projectile Trajectory (\u03b8={theta}\u00b0, v\u2080={v0}m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.grid() plt.ylim(0, max(y)*1.2) interact(plot_trajectory, v0=(5,50,5), theta=(0,90,5), g=(1.62,24.79,0.1), h0=(0,20,1))","title":"4.1 Python Simulation Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#42-key-visualizations","text":"Range vs Angle Curves The graph illustrates the relationship between the launch angle (\u03b8) and the resulting range (R) of a projectile in the absence of air resistance. It shows a parabolic pattern, peaking at 45\u00b0, where the range is maximized. Complementary angles (like 30\u00b0 and 60\u00b0) produce identical ranges, highlighting the symmetry of projectile motion. The absence of air resistance simplifies the motion, ensuring that only gravity influences the projectile's path. Trajectories for Different Launch Angles This diagram depicts the trajectories of a projectile launched at different angles\u201430\u00b0, 45\u00b0, 60\u00b0, and 75\u00b0. The optimal range occurs at a launch angle of 45\u00b0, where the balance between horizontal and vertical components of velocity is ideal. As the angle increases beyond 45\u00b0, the height increases, but the horizontal range decreases. This visualization demonstrates the compromise between height and distance in projectile motion.","title":"4.2 Key Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-deliverables","text":"","title":"5. Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#51-complete-analysis-package","text":"Jupyter Notebook with: Interactive trajectory simulator Parameter sensitivity plots Planetary environment comparisons","title":"5.1 Complete Analysis Package"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#52-limitations-and-extensions","text":"Current Limitations: - No air resistance - Flat Earth assumption - 2D-only simulation Advanced Extensions: 1. Drag Force Model $$ F_{\\text{drag}} = -\\frac{1}{2}C_d\\rho A v^2 $$ 2. Wind Effects - Crosswind compensation 3. 3D Simulation - Coriolis effect for long-range projectiles Conclusion: This investigation bridges fundamental physics with practical applications through computational modeling. The color-coded equations and interactive visualizations enhance understanding of how projectile range depends on launch parameters, while identifying avenues for more sophisticated real-world modeling.","title":"5.2 Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum A Comprehensive Physics and Computational Analysis 1. Theoretical Foundation 1.1 Equation of Motion A forced damped pendulum is governed by a second-order nonlinear differential equation: \\[ \\ddot{\\theta} + \\lambda\\,\\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\Omega t) \\tag{1} \\] Where: - \\( \\omega_0 = \\sqrt{g/L} \\) : natural angular frequency - \\( \\lambda \\) : damping coefficient - \\( f \\) , \\( \\Omega \\) : drive amplitude and frequency For small oscillations, \\( \\sin\\theta \\approx \\theta \\) , and the equation simplifies to: \\[ \\ddot{\\theta} + \\lambda\\,\\dot{\\theta} + \\omega_0^2\\,\\theta = f \\cos(\\Omega t) \\tag{2} \\] This linear equation has an analytically solvable steady-state solution plus a decaying transient. 2. Analytical Behavior 2.1 Small-Angle Solution & Resonance At steady state: \\[ \\theta(t) = A_p \\cos(\\Omega t - \\delta) \\] Where: \\[ A_p(\\Omega) = \\frac{f}{\\sqrt{(\\omega_0^2 - \\Omega^2)^2 + (\\lambda\\,\\Omega)^2}} \\tag{3} \\] Resonance occurs when \\( \\Omega \\approx \\omega_0 \\) At \\( \\lambda = 0 \\) , and \\( \\Omega = \\omega_0 \\) , amplitude grows linearly \u2014 unbounded Resonance pumps energy efficiently into the pendulum, increasing amplitude. 3. Nonlinearity & Chaos 3.1 Beyond the Linear Regime \\( \\sin\\theta \\) dominates \u2192 Nonlinear effects emerge Leads to anharmonic motion, subharmonics, or chaotic behavior Chaos is deterministic yet unpredictable. Sensitive to initial conditions. Notably: - Drive amplitude + low damping = transition to chaos - Adjacent trajectories diverge rapidly in phase space 4. Energy Behavior & Phase Dynamics 4.1 Energy & Resonance in Nonlinear Regimes Even with nonlinearity: - Resonant energy transfer persists - Motion may phase-lock with the driver (oscillate in sync) At high amplitudes: - Secondary resonances - Unpredictable wild swings - Energy oscillates irregularly, yet remains bounded 5. Parameter Sensitivity 5.1 System Response to Parameters Parameter Effect Damping ( \\(\\lambda\\) ) High \u2192 suppress chaos; Low \u2192 allows rich dynamics Drive Amplitude ( \\(f\\) ) Higher \u2192 large rotations, period-doubling Drive Frequency ( \\(\\Omega\\) ) Resonance at \\(\\omega_0\\) ; others \u2192 chaos 6. Bifurcation & Transition to Chaos 6.1 Bifurcation & Poincar\u00e9 Sections As \\(f\\) increases: - Period-1 \u2192 Period-2 \u2192 Period-4 \u2192 Chaos - Other routes: quasi-periodicity , intermittency - Phase space: From closed loops to strange attractors Visualizing motion stroboscopically (Poincar\u00e9 sections) reveals transitions. 7. Physical Interpretation 7.1 Energy Flow and Chaos Periodic motion absorbs energy in a stable way Chaotic motion \u2192 erratic energy exchange Forms strange attractors in phase space with fractal structure 8. Practical Applications 8.1 Real-World Relevance Application Description Vibration Energy Harvesting Uses tuned pendulums to convert ambient energy Suspension Bridges Damping prevents resonant destruction (e.g., Tacoma Narrows) Electrical Circuits RLC and Josephson junctions mimic pendulum dynamics Other Examples Swings, Foucault pendulums, prosthetics, ships 9. Computational Simulation 9.1 Python Implementation Click to view Python Code import numpy as np from math import sin, cos from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # Parameters g = 9.81 L = 1.0 omega0 = np.sqrt(g/L) lambda_damp = 0.5 drive_amp = 1.2 drive_freq = 2/3 * omega0 def pendulum_ode(t, y): theta, omega = y return [omega, -lambda_damp*omega - (omega0**2)*sin(theta) + drive_amp*cos(drive_freq*t)] t_span = (0, 100) y0 = [0.1, 0.0] sol = solve_ivp(pendulum_ode, t_span, y0, max_step=0.01, dense_output=True) t = sol.t theta = sol.y[0] omega = sol.y[1] # Plot angle vs time plt.figure() plt.plot(t, theta) plt.title(\"Pendulum angle over time\") plt.xlabel(\"Time t (s)\") plt.ylabel(\"Angle \u03b8 (rad)\") plt.show() # Plot phase portrait plt.figure() plt.plot(theta, omega, '.') plt.title(\"Phase portrait\") plt.xlabel(\"Angle \u03b8 (rad)\") plt.ylabel(\"Angular velocity \u03c9 (rad/s)\") plt.show() We use a drive frequency of \\( \\frac{2}{3}\\omega_0 \\) , known to produce chaotic behavior under strong driving. The simulation outputs: Angle vs. Time Phase Portrait These plots highlight regular and chaotic dynamics, where: - Periodic motion traces closed loops - Chaotic motion creates a dense, non-repeating structure in phase space Poincar Sections Left: Period-2 orbit two alternating points. Right: Chaotic orbit scattered structure. Sampling at drive period intervals visualizes periodicity vs. chaos. Period doubling manifests as increasing points; chaos emerges as irregular clouds. Bifurcation Diagram Drive amplitude vs. Poincar angle \u03b8: Single value splits into two four continuum (chaos). Bifurcation diagrams reveal how changes in forcing amplitude lead to complex oscillatory behavior and chaos, with windows of periodicity embedded within. 10. Model Limitations & Extensions 10.1 Areas for Further Study Nonlinear Damping: Drag/friction modifies dynamics Complex Forcing: Multi-frequency or stochastic inputs Additional DOF: Double pendulums, moving pivots Feedback & Control: Intentional chaos suppression or enhancement Conclusion: This exploration of the forced damped pendulum bridges analytical physics and chaotic nonlinear systems through elegant mathematics and interactive simulation. Matching real-world phenomena with visual and numerical models, the pendulum becomes a lens through which we understand and predict dynamic, complex motion.","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"A Comprehensive Physics and Computational Analysis","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-equation-of-motion","text":"A forced damped pendulum is governed by a second-order nonlinear differential equation: \\[ \\ddot{\\theta} + \\lambda\\,\\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\Omega t) \\tag{1} \\] Where: - \\( \\omega_0 = \\sqrt{g/L} \\) : natural angular frequency - \\( \\lambda \\) : damping coefficient - \\( f \\) , \\( \\Omega \\) : drive amplitude and frequency For small oscillations, \\( \\sin\\theta \\approx \\theta \\) , and the equation simplifies to: \\[ \\ddot{\\theta} + \\lambda\\,\\dot{\\theta} + \\omega_0^2\\,\\theta = f \\cos(\\Omega t) \\tag{2} \\] This linear equation has an analytically solvable steady-state solution plus a decaying transient.","title":"1.1 Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analytical-behavior","text":"","title":"2. Analytical Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-small-angle-solution-resonance","text":"At steady state: \\[ \\theta(t) = A_p \\cos(\\Omega t - \\delta) \\] Where: \\[ A_p(\\Omega) = \\frac{f}{\\sqrt{(\\omega_0^2 - \\Omega^2)^2 + (\\lambda\\,\\Omega)^2}} \\tag{3} \\] Resonance occurs when \\( \\Omega \\approx \\omega_0 \\) At \\( \\lambda = 0 \\) , and \\( \\Omega = \\omega_0 \\) , amplitude grows linearly \u2014 unbounded Resonance pumps energy efficiently into the pendulum, increasing amplitude.","title":"2.1 Small-Angle Solution &amp; Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-nonlinearity-chaos","text":"","title":"3. Nonlinearity &amp; Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#31-beyond-the-linear-regime","text":"\\( \\sin\\theta \\) dominates \u2192 Nonlinear effects emerge Leads to anharmonic motion, subharmonics, or chaotic behavior Chaos is deterministic yet unpredictable. Sensitive to initial conditions. Notably: - Drive amplitude + low damping = transition to chaos - Adjacent trajectories diverge rapidly in phase space","title":"3.1 Beyond the Linear Regime"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-energy-behavior-phase-dynamics","text":"","title":"4. Energy Behavior &amp; Phase Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-energy-resonance-in-nonlinear-regimes","text":"Even with nonlinearity: - Resonant energy transfer persists - Motion may phase-lock with the driver (oscillate in sync) At high amplitudes: - Secondary resonances - Unpredictable wild swings - Energy oscillates irregularly, yet remains bounded","title":"4.1 Energy &amp; Resonance in Nonlinear Regimes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-parameter-sensitivity","text":"","title":"5. Parameter Sensitivity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#51-system-response-to-parameters","text":"Parameter Effect Damping ( \\(\\lambda\\) ) High \u2192 suppress chaos; Low \u2192 allows rich dynamics Drive Amplitude ( \\(f\\) ) Higher \u2192 large rotations, period-doubling Drive Frequency ( \\(\\Omega\\) ) Resonance at \\(\\omega_0\\) ; others \u2192 chaos","title":"5.1 System Response to Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-bifurcation-transition-to-chaos","text":"","title":"6. Bifurcation &amp; Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#61-bifurcation-poincare-sections","text":"As \\(f\\) increases: - Period-1 \u2192 Period-2 \u2192 Period-4 \u2192 Chaos - Other routes: quasi-periodicity , intermittency - Phase space: From closed loops to strange attractors Visualizing motion stroboscopically (Poincar\u00e9 sections) reveals transitions.","title":"6.1 Bifurcation &amp; Poincar\u00e9 Sections"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-physical-interpretation","text":"","title":"7. Physical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#71-energy-flow-and-chaos","text":"Periodic motion absorbs energy in a stable way Chaotic motion \u2192 erratic energy exchange Forms strange attractors in phase space with fractal structure","title":"7.1 Energy Flow and Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#8-practical-applications","text":"","title":"8. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#81-real-world-relevance","text":"Application Description Vibration Energy Harvesting Uses tuned pendulums to convert ambient energy Suspension Bridges Damping prevents resonant destruction (e.g., Tacoma Narrows) Electrical Circuits RLC and Josephson junctions mimic pendulum dynamics Other Examples Swings, Foucault pendulums, prosthetics, ships","title":"8.1 Real-World Relevance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#9-computational-simulation","text":"","title":"9. Computational Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#91-python-implementation","text":"Click to view Python Code import numpy as np from math import sin, cos from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # Parameters g = 9.81 L = 1.0 omega0 = np.sqrt(g/L) lambda_damp = 0.5 drive_amp = 1.2 drive_freq = 2/3 * omega0 def pendulum_ode(t, y): theta, omega = y return [omega, -lambda_damp*omega - (omega0**2)*sin(theta) + drive_amp*cos(drive_freq*t)] t_span = (0, 100) y0 = [0.1, 0.0] sol = solve_ivp(pendulum_ode, t_span, y0, max_step=0.01, dense_output=True) t = sol.t theta = sol.y[0] omega = sol.y[1] # Plot angle vs time plt.figure() plt.plot(t, theta) plt.title(\"Pendulum angle over time\") plt.xlabel(\"Time t (s)\") plt.ylabel(\"Angle \u03b8 (rad)\") plt.show() # Plot phase portrait plt.figure() plt.plot(theta, omega, '.') plt.title(\"Phase portrait\") plt.xlabel(\"Angle \u03b8 (rad)\") plt.ylabel(\"Angular velocity \u03c9 (rad/s)\") plt.show() We use a drive frequency of \\( \\frac{2}{3}\\omega_0 \\) , known to produce chaotic behavior under strong driving. The simulation outputs: Angle vs. Time Phase Portrait These plots highlight regular and chaotic dynamics, where: - Periodic motion traces closed loops - Chaotic motion creates a dense, non-repeating structure in phase space","title":"9.1 Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincar-sections","text":"Left: Period-2 orbit two alternating points. Right: Chaotic orbit scattered structure. Sampling at drive period intervals visualizes periodicity vs. chaos. Period doubling manifests as increasing points; chaos emerges as irregular clouds.","title":"Poincar Sections"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram","text":"Drive amplitude vs. Poincar angle \u03b8: Single value splits into two four continuum (chaos). Bifurcation diagrams reveal how changes in forcing amplitude lead to complex oscillatory behavior and chaos, with windows of periodicity embedded within.","title":"Bifurcation Diagram"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#10-model-limitations-extensions","text":"","title":"10. Model Limitations &amp; Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#101-areas-for-further-study","text":"Nonlinear Damping: Drag/friction modifies dynamics Complex Forcing: Multi-frequency or stochastic inputs Additional DOF: Double pendulums, moving pivots Feedback & Control: Intentional chaos suppression or enhancement","title":"10.1 Areas for Further Study"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"This exploration of the forced damped pendulum bridges analytical physics and chaotic nonlinear systems through elegant mathematics and interactive simulation. Matching real-world phenomena with visual and numerical models, the pendulum becomes a lens through which we understand and predict dynamic, complex motion.","title":"Conclusion:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Investigating the Orbital Period\u2013Radius Relationship Theoretical Foundation Kepler\u2019s Third Law (Circular Orbits) For a satellite in circular orbit around a much larger body (e.g., Earth, Sun), gravitational force provides the centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Cancelling \\(m\\) and rearranging gives the orbital speed: \\[ v = \\sqrt{\\frac{G M}{r}} \\] The period \\(T\\) is the time to complete one orbit: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\tag{1} \\] Squaring both sides: \\[ T^2 \\propto r^3 \\] This is Kepler\u2019s Third Law for circular motion. Implications in Astronomy This law allows determination of mass of celestial objects using orbital characteristics. Used in satellite mission planning and planetary system modeling . For solar system planets, plotting \\(T^2\\) vs \\(r^3\\) yields a straight line . Real-World Examples Earth-Moon System: Moon's orbital radius: \\(384,400\\) km Orbital period: ~27.3 days Solar System: Mercury to Neptune follow \\(T^2 \\propto r^3\\) Deviations arise for highly elliptical orbits or perturbed systems \ud83d\udcca Visual comparison of planetary data : [Insert chart: Log-Log plot of T\u00b2 vs R\u00b3 for Solar System planets] \ud83d\udccc Image placeholder: ??? Simulation: Circular Orbits Let\u2019s simulate satellite motion around a central body and verify Kepler\u2019s Law. Click to view Python code import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # Gravitational constant M = 5.972e24 # Mass of Earth (kg) radii = np.linspace(6.7e6, 4.2e7, 100) # Varying orbit radius periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.figure() plt.plot(radii / 1e6, periods / 3600) plt.title(\"Orbital Period vs Radius\") plt.xlabel(\"Orbital Radius (10\u2076 m)\") plt.ylabel(\"Period (hours)\") plt.grid(True) plt.show() \ud83d\udccc Plot placeholder: Orbital Period vs Radius \ud83d\udccc Image: ??? Orbit Animation (Optional) A simple simulation of a satellite orbiting Earth. \ud83d\udccc Animated GIF placeholder: Satellite orbit path simulation \ud83c\udf9e\ufe0f File: ??? Extension to Elliptical Orbits For ellipses, Kepler\u2019s Third Law still holds, but \\(r\\) becomes the semi-major axis \\(a\\) : \\[ T^2 = \\frac{4\\pi^2 a^3}{G M} \\] Applies to: - Planetary systems - Comets and asteroids - Exoplanet detection via transit timing Conclusion The \\(T^2 \\propto r^3\\) relationship connects geometry with dynamics Enables mass/distance calculations for celestial objects Holds in ideal and elliptical orbits, proving essential for astrophysics , satellite design , and space exploration Kepler\u2019s Third Law bridges the gap between Newtonian gravity and orbital motion \u2014 an elegant expression of universal harmony.","title":"Investigating the Orbital Period\u2013Radius Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#investigating-the-orbital-periodradius-relationship","text":"","title":"Investigating the Orbital Period\u2013Radius Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-circular-orbits","text":"For a satellite in circular orbit around a much larger body (e.g., Earth, Sun), gravitational force provides the centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Cancelling \\(m\\) and rearranging gives the orbital speed: \\[ v = \\sqrt{\\frac{G M}{r}} \\] The period \\(T\\) is the time to complete one orbit: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\tag{1} \\] Squaring both sides: \\[ T^2 \\propto r^3 \\] This is Kepler\u2019s Third Law for circular motion.","title":"Kepler\u2019s Third Law (Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-in-astronomy","text":"This law allows determination of mass of celestial objects using orbital characteristics. Used in satellite mission planning and planetary system modeling . For solar system planets, plotting \\(T^2\\) vs \\(r^3\\) yields a straight line .","title":"Implications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-examples","text":"","title":"Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#earth-moon-system","text":"Moon's orbital radius: \\(384,400\\) km Orbital period: ~27.3 days","title":"Earth-Moon System:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#solar-system","text":"Mercury to Neptune follow \\(T^2 \\propto r^3\\) Deviations arise for highly elliptical orbits or perturbed systems \ud83d\udcca Visual comparison of planetary data : [Insert chart: Log-Log plot of T\u00b2 vs R\u00b3 for Solar System planets] \ud83d\udccc Image placeholder: ???","title":"Solar System:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulation-circular-orbits","text":"Let\u2019s simulate satellite motion around a central body and verify Kepler\u2019s Law. Click to view Python code import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # Gravitational constant M = 5.972e24 # Mass of Earth (kg) radii = np.linspace(6.7e6, 4.2e7, 100) # Varying orbit radius periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.figure() plt.plot(radii / 1e6, periods / 3600) plt.title(\"Orbital Period vs Radius\") plt.xlabel(\"Orbital Radius (10\u2076 m)\") plt.ylabel(\"Period (hours)\") plt.grid(True) plt.show() \ud83d\udccc Plot placeholder: Orbital Period vs Radius \ud83d\udccc Image: ???","title":"Simulation: Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbit-animation-optional","text":"A simple simulation of a satellite orbiting Earth. \ud83d\udccc Animated GIF placeholder: Satellite orbit path simulation \ud83c\udf9e\ufe0f File: ???","title":"Orbit Animation (Optional)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extension-to-elliptical-orbits","text":"For ellipses, Kepler\u2019s Third Law still holds, but \\(r\\) becomes the semi-major axis \\(a\\) : \\[ T^2 = \\frac{4\\pi^2 a^3}{G M} \\] Applies to: - Planetary systems - Comets and asteroids - Exoplanet detection via transit timing","title":"Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"The \\(T^2 \\propto r^3\\) relationship connects geometry with dynamics Enables mass/distance calculations for celestial objects Holds in ideal and elliptical orbits, proving essential for astrophysics , satellite design , and space exploration Kepler\u2019s Third Law bridges the gap between Newtonian gravity and orbital motion \u2014 an elegant expression of universal harmony.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}